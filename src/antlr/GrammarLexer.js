// Generated from Grammar.g by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,25,154,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,1,1,1,1,1,
1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,
10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,
18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,4,22,134,8,22,
11,22,12,22,135,1,22,1,22,4,22,140,8,22,11,22,12,22,141,3,22,144,8,22,1,
23,4,23,147,8,23,11,23,12,23,148,1,24,1,24,1,24,1,24,0,0,25,1,1,3,2,5,3,
7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,1,0,3,1,0,48,57,2,0,65,
90,97,122,3,0,9,10,13,13,32,32,157,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,
0,0,0,3,53,1,0,0,0,5,57,1,0,0,0,7,59,1,0,0,0,9,65,1,0,0,0,11,67,1,0,0,0,
13,74,1,0,0,0,15,77,1,0,0,0,17,82,1,0,0,0,19,87,1,0,0,0,21,91,1,0,0,0,23,
97,1,0,0,0,25,100,1,0,0,0,27,110,1,0,0,0,29,112,1,0,0,0,31,114,1,0,0,0,33,
116,1,0,0,0,35,118,1,0,0,0,37,120,1,0,0,0,39,123,1,0,0,0,41,126,1,0,0,0,
43,129,1,0,0,0,45,133,1,0,0,0,47,146,1,0,0,0,49,150,1,0,0,0,51,52,5,59,0,
0,52,2,1,0,0,0,53,54,5,118,0,0,54,55,5,97,0,0,55,56,5,114,0,0,56,4,1,0,0,
0,57,58,5,61,0,0,58,6,1,0,0,0,59,60,5,114,0,0,60,61,5,101,0,0,61,62,5,97,
0,0,62,63,5,100,0,0,63,64,5,40,0,0,64,8,1,0,0,0,65,66,5,41,0,0,66,10,1,0,
0,0,67,68,5,112,0,0,68,69,5,114,0,0,69,70,5,105,0,0,70,71,5,110,0,0,71,72,
5,116,0,0,72,73,5,40,0,0,73,12,1,0,0,0,74,75,5,105,0,0,75,76,5,102,0,0,76,
14,1,0,0,0,77,78,5,116,0,0,78,79,5,104,0,0,79,80,5,101,0,0,80,81,5,110,0,
0,81,16,1,0,0,0,82,83,5,101,0,0,83,84,5,108,0,0,84,85,5,115,0,0,85,86,5,
101,0,0,86,18,1,0,0,0,87,88,5,101,0,0,88,89,5,110,0,0,89,90,5,100,0,0,90,
20,1,0,0,0,91,92,5,119,0,0,92,93,5,104,0,0,93,94,5,105,0,0,94,95,5,108,0,
0,95,96,5,101,0,0,96,22,1,0,0,0,97,98,5,100,0,0,98,99,5,111,0,0,99,24,1,
0,0,0,100,101,5,100,0,0,101,102,5,114,0,0,102,103,5,97,0,0,103,104,5,119,
0,0,104,105,5,108,0,0,105,106,5,105,0,0,106,107,5,110,0,0,107,108,5,101,
0,0,108,109,5,40,0,0,109,26,1,0,0,0,110,111,5,44,0,0,111,28,1,0,0,0,112,
113,5,43,0,0,113,30,1,0,0,0,114,115,5,45,0,0,115,32,1,0,0,0,116,117,5,62,
0,0,117,34,1,0,0,0,118,119,5,60,0,0,119,36,1,0,0,0,120,121,5,62,0,0,121,
122,5,61,0,0,122,38,1,0,0,0,123,124,5,60,0,0,124,125,5,61,0,0,125,40,1,0,
0,0,126,127,5,61,0,0,127,128,5,61,0,0,128,42,1,0,0,0,129,130,5,33,0,0,130,
131,5,61,0,0,131,44,1,0,0,0,132,134,7,0,0,0,133,132,1,0,0,0,134,135,1,0,
0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,143,1,0,0,0,137,139,5,46,0,0,138,
140,7,0,0,0,139,138,1,0,0,0,140,141,1,0,0,0,141,139,1,0,0,0,141,142,1,0,
0,0,142,144,1,0,0,0,143,137,1,0,0,0,143,144,1,0,0,0,144,46,1,0,0,0,145,147,
7,1,0,0,146,145,1,0,0,0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,
149,48,1,0,0,0,150,151,7,2,0,0,151,152,1,0,0,0,152,153,6,24,0,0,153,50,1,
0,0,0,5,0,135,141,143,148,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class GrammarLexer extends antlr4.Lexer {

    static grammarFileName = "Grammar.g";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "';'", "'var'", "'='", "'read('", "')'", 
                         "'print('", "'if'", "'then'", "'else'", "'end'", 
                         "'while'", "'do'", "'drawline('", "','", "'+'", 
                         "'-'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, "NB", 
                          "IDENT", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "T__21", "NB", "IDENT", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

GrammarLexer.EOF = antlr4.Token.EOF;
GrammarLexer.T__0 = 1;
GrammarLexer.T__1 = 2;
GrammarLexer.T__2 = 3;
GrammarLexer.T__3 = 4;
GrammarLexer.T__4 = 5;
GrammarLexer.T__5 = 6;
GrammarLexer.T__6 = 7;
GrammarLexer.T__7 = 8;
GrammarLexer.T__8 = 9;
GrammarLexer.T__9 = 10;
GrammarLexer.T__10 = 11;
GrammarLexer.T__11 = 12;
GrammarLexer.T__12 = 13;
GrammarLexer.T__13 = 14;
GrammarLexer.T__14 = 15;
GrammarLexer.T__15 = 16;
GrammarLexer.T__16 = 17;
GrammarLexer.T__17 = 18;
GrammarLexer.T__18 = 19;
GrammarLexer.T__19 = 20;
GrammarLexer.T__20 = 21;
GrammarLexer.T__21 = 22;
GrammarLexer.NB = 23;
GrammarLexer.IDENT = 24;
GrammarLexer.WS = 25;



