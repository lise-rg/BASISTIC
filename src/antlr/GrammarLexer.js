// Generated from Grammar.g by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,66,447,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
7,63,2,64,7,64,2,65,7,65,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,
1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,
30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,
1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,
41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,
1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,
50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,
1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,
57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,60,4,60,405,8,60,11,60,12,60,406,
1,60,5,60,410,8,60,10,60,12,60,413,9,60,1,61,4,61,416,8,61,11,61,12,61,417,
1,62,1,62,5,62,422,8,62,10,62,12,62,425,9,62,1,62,1,62,1,63,1,63,1,63,1,
63,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,5,65,441,8,65,10,65,12,65,444,
9,65,1,65,1,65,0,0,66,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,
117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,1,0,5,2,0,65,90,
97,122,2,0,48,57,95,95,1,0,48,57,2,0,32,33,35,255,3,0,9,10,13,13,32,32,451,
0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,
91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,
0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,
0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,1,
133,1,0,0,0,3,135,1,0,0,0,5,137,1,0,0,0,7,141,1,0,0,0,9,143,1,0,0,0,11,145,
1,0,0,0,13,149,1,0,0,0,15,151,1,0,0,0,17,154,1,0,0,0,19,159,1,0,0,0,21,164,
1,0,0,0,23,170,1,0,0,0,25,173,1,0,0,0,27,178,1,0,0,0,29,183,1,0,0,0,31,189,
1,0,0,0,33,195,1,0,0,0,35,198,1,0,0,0,37,203,1,0,0,0,39,209,1,0,0,0,41,215,
1,0,0,0,43,224,1,0,0,0,45,226,1,0,0,0,47,235,1,0,0,0,49,246,1,0,0,0,51,257,
1,0,0,0,53,270,1,0,0,0,55,280,1,0,0,0,57,294,1,0,0,0,59,301,1,0,0,0,61,305,
1,0,0,0,63,309,1,0,0,0,65,312,1,0,0,0,67,316,1,0,0,0,69,320,1,0,0,0,71,323,
1,0,0,0,73,325,1,0,0,0,75,328,1,0,0,0,77,330,1,0,0,0,79,333,1,0,0,0,81,335,
1,0,0,0,83,337,1,0,0,0,85,339,1,0,0,0,87,341,1,0,0,0,89,343,1,0,0,0,91,345,
1,0,0,0,93,349,1,0,0,0,95,353,1,0,0,0,97,357,1,0,0,0,99,361,1,0,0,0,101,
365,1,0,0,0,103,368,1,0,0,0,105,372,1,0,0,0,107,376,1,0,0,0,109,380,1,0,
0,0,111,384,1,0,0,0,113,388,1,0,0,0,115,393,1,0,0,0,117,397,1,0,0,0,119,
401,1,0,0,0,121,404,1,0,0,0,123,415,1,0,0,0,125,419,1,0,0,0,127,428,1,0,
0,0,129,432,1,0,0,0,131,436,1,0,0,0,133,134,5,59,0,0,134,2,1,0,0,0,135,136,
5,58,0,0,136,4,1,0,0,0,137,138,5,68,0,0,138,139,5,73,0,0,139,140,5,77,0,
0,140,6,1,0,0,0,141,142,5,40,0,0,142,8,1,0,0,0,143,144,5,41,0,0,144,10,1,
0,0,0,145,146,5,70,0,0,146,147,5,79,0,0,147,148,5,82,0,0,148,12,1,0,0,0,
149,150,5,61,0,0,150,14,1,0,0,0,151,152,5,84,0,0,152,153,5,79,0,0,153,16,
1,0,0,0,154,155,5,83,0,0,155,156,5,84,0,0,156,157,5,69,0,0,157,158,5,80,
0,0,158,18,1,0,0,0,159,160,5,70,0,0,160,161,5,69,0,0,161,162,5,78,0,0,162,
163,5,68,0,0,163,20,1,0,0,0,164,165,5,71,0,0,165,166,5,79,0,0,166,167,5,
83,0,0,167,168,5,85,0,0,168,169,5,66,0,0,169,22,1,0,0,0,170,171,5,73,0,0,
171,172,5,70,0,0,172,24,1,0,0,0,173,174,5,84,0,0,174,175,5,72,0,0,175,176,
5,69,0,0,176,177,5,78,0,0,177,26,1,0,0,0,178,179,5,69,0,0,179,180,5,76,0,
0,180,181,5,83,0,0,181,182,5,69,0,0,182,28,1,0,0,0,183,184,5,69,0,0,184,
185,5,78,0,0,185,186,5,68,0,0,186,187,5,73,0,0,187,188,5,70,0,0,188,30,1,
0,0,0,189,190,5,87,0,0,190,191,5,72,0,0,191,192,5,73,0,0,192,193,5,76,0,
0,193,194,5,69,0,0,194,32,1,0,0,0,195,196,5,68,0,0,196,197,5,79,0,0,197,
34,1,0,0,0,198,199,5,87,0,0,199,200,5,69,0,0,200,201,5,78,0,0,201,202,5,
68,0,0,202,36,1,0,0,0,203,204,5,73,0,0,204,205,5,78,0,0,205,206,5,80,0,0,
206,207,5,85,0,0,207,208,5,84,0,0,208,38,1,0,0,0,209,210,5,80,0,0,210,211,
5,82,0,0,211,212,5,73,0,0,212,213,5,78,0,0,213,214,5,84,0,0,214,40,1,0,0,
0,215,216,5,68,0,0,216,217,5,82,0,0,217,218,5,65,0,0,218,219,5,87,0,0,219,
220,5,76,0,0,220,221,5,73,0,0,221,222,5,78,0,0,222,223,5,69,0,0,223,42,1,
0,0,0,224,225,5,44,0,0,225,44,1,0,0,0,226,227,5,68,0,0,227,228,5,82,0,0,
228,229,5,65,0,0,229,230,5,87,0,0,230,231,5,82,0,0,231,232,5,69,0,0,232,
233,5,67,0,0,233,234,5,84,0,0,234,46,1,0,0,0,235,236,5,68,0,0,236,237,5,
82,0,0,237,238,5,65,0,0,238,239,5,87,0,0,239,240,5,83,0,0,240,241,5,81,0,
0,241,242,5,85,0,0,242,243,5,65,0,0,243,244,5,82,0,0,244,245,5,69,0,0,245,
48,1,0,0,0,246,247,5,68,0,0,247,248,5,82,0,0,248,249,5,65,0,0,249,250,5,
87,0,0,250,251,5,67,0,0,251,252,5,73,0,0,252,253,5,82,0,0,253,254,5,67,0,
0,254,255,5,76,0,0,255,256,5,69,0,0,256,50,1,0,0,0,257,258,5,68,0,0,258,
259,5,82,0,0,259,260,5,65,0,0,260,261,5,87,0,0,261,262,5,84,0,0,262,263,
5,82,0,0,263,264,5,73,0,0,264,265,5,65,0,0,265,266,5,78,0,0,266,267,5,71,
0,0,267,268,5,76,0,0,268,269,5,69,0,0,269,52,1,0,0,0,270,271,5,68,0,0,271,
272,5,82,0,0,272,273,5,65,0,0,273,274,5,87,0,0,274,275,5,67,0,0,275,276,
5,76,0,0,276,277,5,69,0,0,277,278,5,65,0,0,278,279,5,82,0,0,279,54,1,0,0,
0,280,281,5,68,0,0,281,282,5,82,0,0,282,283,5,65,0,0,283,284,5,87,0,0,284,
285,5,67,0,0,285,286,5,76,0,0,286,287,5,69,0,0,287,288,5,65,0,0,288,289,
5,82,0,0,289,290,5,65,0,0,290,291,5,82,0,0,291,292,5,69,0,0,292,293,5,65,
0,0,293,56,1,0,0,0,294,295,5,82,0,0,295,296,5,69,0,0,296,297,5,84,0,0,297,
298,5,85,0,0,298,299,5,82,0,0,299,300,5,78,0,0,300,58,1,0,0,0,301,302,5,
69,0,0,302,303,5,78,0,0,303,304,5,68,0,0,304,60,1,0,0,0,305,306,5,76,0,0,
306,307,5,69,0,0,307,308,5,84,0,0,308,62,1,0,0,0,309,310,5,79,0,0,310,311,
5,82,0,0,311,64,1,0,0,0,312,313,5,65,0,0,313,314,5,78,0,0,314,315,5,68,0,
0,315,66,1,0,0,0,316,317,5,78,0,0,317,318,5,79,0,0,318,319,5,84,0,0,319,
68,1,0,0,0,320,321,5,60,0,0,321,322,5,62,0,0,322,70,1,0,0,0,323,324,5,62,
0,0,324,72,1,0,0,0,325,326,5,62,0,0,326,327,5,61,0,0,327,74,1,0,0,0,328,
329,5,60,0,0,329,76,1,0,0,0,330,331,5,60,0,0,331,332,5,61,0,0,332,78,1,0,
0,0,333,334,5,43,0,0,334,80,1,0,0,0,335,336,5,45,0,0,336,82,1,0,0,0,337,
338,5,42,0,0,338,84,1,0,0,0,339,340,5,47,0,0,340,86,1,0,0,0,341,342,5,37,
0,0,342,88,1,0,0,0,343,344,5,94,0,0,344,90,1,0,0,0,345,346,5,65,0,0,346,
347,5,66,0,0,347,348,5,83,0,0,348,92,1,0,0,0,349,350,5,65,0,0,350,351,5,
84,0,0,351,352,5,78,0,0,352,94,1,0,0,0,353,354,5,67,0,0,354,355,5,79,0,0,
355,356,5,83,0,0,356,96,1,0,0,0,357,358,5,69,0,0,358,359,5,88,0,0,359,360,
5,80,0,0,360,98,1,0,0,0,361,362,5,73,0,0,362,363,5,78,0,0,363,364,5,84,0,
0,364,100,1,0,0,0,365,366,5,76,0,0,366,367,5,78,0,0,367,102,1,0,0,0,368,
369,5,82,0,0,369,370,5,78,0,0,370,371,5,68,0,0,371,104,1,0,0,0,372,373,5,
83,0,0,373,374,5,73,0,0,374,375,5,78,0,0,375,106,1,0,0,0,376,377,5,83,0,
0,377,378,5,81,0,0,378,379,5,82,0,0,379,108,1,0,0,0,380,381,5,84,0,0,381,
382,5,65,0,0,382,383,5,78,0,0,383,110,1,0,0,0,384,385,5,76,0,0,385,386,5,
79,0,0,386,387,5,71,0,0,387,112,1,0,0,0,388,389,5,80,0,0,389,390,5,71,0,
0,390,391,5,67,0,0,391,392,5,68,0,0,392,114,1,0,0,0,393,394,5,77,0,0,394,
395,5,73,0,0,395,396,5,78,0,0,396,116,1,0,0,0,397,398,5,77,0,0,398,399,5,
65,0,0,399,400,5,88,0,0,400,118,1,0,0,0,401,402,5,95,0,0,402,120,1,0,0,0,
403,405,7,0,0,0,404,403,1,0,0,0,405,406,1,0,0,0,406,404,1,0,0,0,406,407,
1,0,0,0,407,411,1,0,0,0,408,410,7,1,0,0,409,408,1,0,0,0,410,413,1,0,0,0,
411,409,1,0,0,0,411,412,1,0,0,0,412,122,1,0,0,0,413,411,1,0,0,0,414,416,
7,2,0,0,415,414,1,0,0,0,416,417,1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,
418,124,1,0,0,0,419,423,5,34,0,0,420,422,7,3,0,0,421,420,1,0,0,0,422,425,
1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,425,423,1,0,0,0,
426,427,5,34,0,0,427,126,1,0,0,0,428,429,3,123,61,0,429,430,5,46,0,0,430,
431,3,123,61,0,431,128,1,0,0,0,432,433,7,4,0,0,433,434,1,0,0,0,434,435,6,
64,0,0,435,130,1,0,0,0,436,437,5,47,0,0,437,438,5,47,0,0,438,442,1,0,0,0,
439,441,7,3,0,0,440,439,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,
1,0,0,0,443,445,1,0,0,0,444,442,1,0,0,0,445,446,6,65,0,0,446,132,1,0,0,0,
6,0,406,411,417,423,442,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class GrammarLexer extends antlr4.Lexer {

    static grammarFileName = "Grammar.g";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "';'", "':'", "'DIM'", "'('", "')'", "'FOR'", 
                         "'='", "'TO'", "'STEP'", "'FEND'", "'GOSUB'", "'IF'", 
                         "'THEN'", "'ELSE'", "'ENDIF'", "'WHILE'", "'DO'", 
                         "'WEND'", "'INPUT'", "'PRINT'", "'DRAWLINE'", "','", 
                         "'DRAWRECT'", "'DRAWSQUARE'", "'DRAWCIRCLE'", "'DRAWTRIANGLE'", 
                         "'DRAWCLEAR'", "'DRAWCLEARAREA'", "'RETURN'", "'END'", 
                         "'LET'", "'OR'", "'AND'", "'NOT'", "'<>'", "'>'", 
                         "'>='", "'<'", "'<='", "'+'", "'-'", "'*'", "'/'", 
                         "'%'", "'^'", "'ABS'", "'ATN'", "'COS'", "'EXP'", 
                         "'INT'", "'LN'", "'RND'", "'SIN'", "'SQR'", "'TAN'", 
                         "'LOG'", "'PGCD'", "'MIN'", "'MAX'", "'_'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, "ID", "Integer", 
                          "String", "Real", "WS", "COMMENT" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
                      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", 
                      "T__31", "T__32", "T__33", "T__34", "T__35", "T__36", 
                      "T__37", "T__38", "T__39", "T__40", "T__41", "T__42", 
                      "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
                      "T__49", "T__50", "T__51", "T__52", "T__53", "T__54", 
                      "T__55", "T__56", "T__57", "T__58", "T__59", "ID", 
                      "Integer", "String", "Real", "WS", "COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

GrammarLexer.EOF = antlr4.Token.EOF;
GrammarLexer.T__0 = 1;
GrammarLexer.T__1 = 2;
GrammarLexer.T__2 = 3;
GrammarLexer.T__3 = 4;
GrammarLexer.T__4 = 5;
GrammarLexer.T__5 = 6;
GrammarLexer.T__6 = 7;
GrammarLexer.T__7 = 8;
GrammarLexer.T__8 = 9;
GrammarLexer.T__9 = 10;
GrammarLexer.T__10 = 11;
GrammarLexer.T__11 = 12;
GrammarLexer.T__12 = 13;
GrammarLexer.T__13 = 14;
GrammarLexer.T__14 = 15;
GrammarLexer.T__15 = 16;
GrammarLexer.T__16 = 17;
GrammarLexer.T__17 = 18;
GrammarLexer.T__18 = 19;
GrammarLexer.T__19 = 20;
GrammarLexer.T__20 = 21;
GrammarLexer.T__21 = 22;
GrammarLexer.T__22 = 23;
GrammarLexer.T__23 = 24;
GrammarLexer.T__24 = 25;
GrammarLexer.T__25 = 26;
GrammarLexer.T__26 = 27;
GrammarLexer.T__27 = 28;
GrammarLexer.T__28 = 29;
GrammarLexer.T__29 = 30;
GrammarLexer.T__30 = 31;
GrammarLexer.T__31 = 32;
GrammarLexer.T__32 = 33;
GrammarLexer.T__33 = 34;
GrammarLexer.T__34 = 35;
GrammarLexer.T__35 = 36;
GrammarLexer.T__36 = 37;
GrammarLexer.T__37 = 38;
GrammarLexer.T__38 = 39;
GrammarLexer.T__39 = 40;
GrammarLexer.T__40 = 41;
GrammarLexer.T__41 = 42;
GrammarLexer.T__42 = 43;
GrammarLexer.T__43 = 44;
GrammarLexer.T__44 = 45;
GrammarLexer.T__45 = 46;
GrammarLexer.T__46 = 47;
GrammarLexer.T__47 = 48;
GrammarLexer.T__48 = 49;
GrammarLexer.T__49 = 50;
GrammarLexer.T__50 = 51;
GrammarLexer.T__51 = 52;
GrammarLexer.T__52 = 53;
GrammarLexer.T__53 = 54;
GrammarLexer.T__54 = 55;
GrammarLexer.T__55 = 56;
GrammarLexer.T__56 = 57;
GrammarLexer.T__57 = 58;
GrammarLexer.T__58 = 59;
GrammarLexer.T__59 = 60;
GrammarLexer.ID = 61;
GrammarLexer.Integer = 62;
GrammarLexer.String = 63;
GrammarLexer.Real = 64;
GrammarLexer.WS = 65;
GrammarLexer.COMMENT = 66;



